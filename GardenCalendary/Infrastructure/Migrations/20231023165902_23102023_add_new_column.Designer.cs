// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(GardenCalendaryContext))]
    [Migration("20231023165902_23102023_add_new_column")]
    partial class _23102023_add_new_column
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Garden", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Dateharvesting")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateharvesting");

                    b.Property<DateTime?>("Datehoeing")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datehoeing");

                    b.Property<DateTime?>("Dateloosening")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateloosening");

                    b.Property<DateTime?>("Dateplantingt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateplantingt");

                    b.Property<DateTime?>("Datewatering")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("datewatering");

                    b.Property<DateTime?>("Dateweeding")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dateweeding");

                    b.Property<Guid?>("Plantid")
                        .HasColumnType("uuid")
                        .HasColumnName("plantid");

                    b.Property<string>("Plantname")
                        .HasColumnType("text")
                        .HasColumnName("plantname");

                    b.HasKey("Id")
                        .HasName("garden_pkey");

                    b.HasIndex("Plantid");

                    b.ToTable("garden", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("FirstWateringAfterPlanting")
                        .HasColumnType("integer");

                    b.Property<int?>("HarvestingAfterPlanting")
                        .HasColumnType("integer");

                    b.Property<int[]>("HoeingAfterPlanting")
                        .HasColumnType("integer[]");

                    b.Property<int?>("LooseningPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("MinTemperaturaForPlanting")
                        .HasColumnType("integer");

                    b.Property<int[]>("NumberMonthsForPlanting")
                        .HasColumnType("integer[]");

                    b.Property<string>("PlantName")
                        .HasColumnType("text");

                    b.Property<int?>("WateringPeriod")
                        .HasColumnType("integer");

                    b.Property<int?>("WeedingPeriod")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("plant_pkey");

                    b.ToTable("plant", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RPrecipitation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Precipitation")
                        .HasColumnType("character varying")
                        .HasColumnName("precipitation");

                    b.HasKey("Id")
                        .HasName("precipitation_pkey");

                    b.ToTable("r$precipitation", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RReestrObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccuweatherId")
                        .HasColumnType("integer")
                        .HasColumnName("accuweather_id");

                    b.Property<string>("ObjectName")
                        .HasColumnType("character varying")
                        .HasColumnName("object_name");

                    b.Property<int?>("RegionCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("region_code_id");

                    b.HasKey("Id")
                        .HasName("r$reestr_object_pkey");

                    b.HasIndex(new[] { "RegionCodeId" }, "IX_r$reestr_object_region_code_id");

                    b.ToTable("r$reestr_object", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Region", b =>
                {
                    b.Property<int>("RegionCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("region_code_id");

                    b.Property<string>("RegionName")
                        .HasColumnType("character varying")
                        .HasColumnName("region_name");

                    b.HasKey("RegionCodeId")
                        .HasName("region_pkey");

                    b.ToTable("region", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Stead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<Guid?>("Plantid")
                        .HasColumnType("uuid")
                        .HasColumnName("plantid");

                    b.Property<int?>("RegionCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("region_code_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("stead_pkey");

                    b.HasIndex("Plantid");

                    b.HasIndex(new[] { "ObjectId" }, "IX_stead_object_id");

                    b.HasIndex(new[] { "RegionCodeId" }, "IX_stead_region_code_id");

                    b.HasIndex(new[] { "UserId" }, "IX_stead_user_id");

                    b.ToTable("stead", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnType("character varying")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Login")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("character varying")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("RegionCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("region_code_id");

                    b.Property<string>("SecondName")
                        .HasColumnType("character varying")
                        .HasColumnName("second_name");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "RegionCodeId" }, "IX_users_region_code_id");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_UserToken_UserId");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.WeatherCalendarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateTame")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_tame");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<int?>("PrecipitationId")
                        .HasColumnType("integer")
                        .HasColumnName("precipitation_id");

                    b.Property<int?>("RegionCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("region_code_id");

                    b.Property<int?>("TemperaturaMax")
                        .HasColumnType("integer")
                        .HasColumnName("temperatura_max");

                    b.Property<int?>("TemperaturaMin")
                        .HasColumnType("integer")
                        .HasColumnName("temperatura_min");

                    b.HasKey("Id")
                        .HasName("weather_calendar_pkey");

                    b.HasIndex(new[] { "ObjectId" }, "IX_weather_calendar_object_id");

                    b.HasIndex(new[] { "PrecipitationId" }, "IX_weather_calendar_precipitation_id");

                    b.HasIndex(new[] { "RegionCodeId" }, "IX_weather_calendar_region_code_id");

                    b.ToTable("weather_calendar", (string)null);
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_UserRole_RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Garden", b =>
                {
                    b.HasOne("Domain.Entities.Plant", "Plant")
                        .WithMany("Gardens")
                        .HasForeignKey("Plantid")
                        .HasConstraintName("fk_plant_to_garden");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Domain.Entities.RReestrObject", b =>
                {
                    b.HasOne("Domain.Entities.Region", "RegionCode")
                        .WithMany("RReestrObjects")
                        .HasForeignKey("RegionCodeId");

                    b.Navigation("RegionCode");
                });

            modelBuilder.Entity("Domain.Entities.Stead", b =>
                {
                    b.HasOne("Domain.Entities.RReestrObject", "Object")
                        .WithMany("Steads")
                        .HasForeignKey("ObjectId")
                        .HasConstraintName("stead_object_id_fkey");

                    b.HasOne("Domain.Entities.Plant", "Plant")
                        .WithMany("Steads")
                        .HasForeignKey("Plantid")
                        .HasConstraintName("stead_plantid_fkey");

                    b.HasOne("Domain.Entities.Region", "RegionCode")
                        .WithMany("Steads")
                        .HasForeignKey("RegionCodeId")
                        .HasConstraintName("stead_region_code_fkey");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Steads")
                        .HasForeignKey("UserId")
                        .HasConstraintName("stead_user_id_fkey");

                    b.Navigation("Object");

                    b.Navigation("Plant");

                    b.Navigation("RegionCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Region", "RegionCode")
                        .WithMany("Users")
                        .HasForeignKey("RegionCodeId")
                        .HasConstraintName("users_region_code_fkey");

                    b.Navigation("RegionCode");
                });

            modelBuilder.Entity("Domain.Entities.UserToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.WeatherCalendarModel", b =>
                {
                    b.HasOne("Domain.Entities.RReestrObject", "Object")
                        .WithMany("WeatherCalendars")
                        .HasForeignKey("ObjectId")
                        .HasConstraintName("weather_calendar_object_id_fkey");

                    b.HasOne("Domain.Entities.RPrecipitation", "Precipitation")
                        .WithMany("WeatherCalendars")
                        .HasForeignKey("PrecipitationId")
                        .HasConstraintName("weather_calendar_precipitation_id_fkey");

                    b.HasOne("Domain.Entities.Region", "RegionCode")
                        .WithMany("WeatherCalendars")
                        .HasForeignKey("RegionCodeId")
                        .HasConstraintName("weather_calendar_region_code_fkey");

                    b.Navigation("Object");

                    b.Navigation("Precipitation");

                    b.Navigation("RegionCode");
                });

            modelBuilder.Entity("UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Plant", b =>
                {
                    b.Navigation("Gardens");

                    b.Navigation("Steads");
                });

            modelBuilder.Entity("Domain.Entities.RPrecipitation", b =>
                {
                    b.Navigation("WeatherCalendars");
                });

            modelBuilder.Entity("Domain.Entities.RReestrObject", b =>
                {
                    b.Navigation("Steads");

                    b.Navigation("WeatherCalendars");
                });

            modelBuilder.Entity("Domain.Entities.Region", b =>
                {
                    b.Navigation("RReestrObjects");

                    b.Navigation("Steads");

                    b.Navigation("Users");

                    b.Navigation("WeatherCalendars");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Steads");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
